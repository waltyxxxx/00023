#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""
Handler functions for the Telegram bot commands and callbacks
"""

import os
import datetime
import logging
import random
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from user_data import (get_user_data, update_user_data, save_user_data, 
                     get_games_played, get_registration_date, get_favorite_game)
from crypto_payments import create_deposit_invoice, test_api_connection, create_fixed_invoice

logger = logging.getLogger(__name__)

# Get channel ID for posting results from environment variables
RESULTS_CHANNEL_ID = os.getenv("-1002305257035")

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Handle the /start command."""
    try:
        logger.info("Received /start command")

        # Verify update contains necessary data
        if not update.effective_user:
            logger.error("No effective_user in update")
            return

        user = update.effective_user
        user_id = user.id
        logger.info(f"Processing /start command for user {user_id}")

        # Initialize user data if first time
        user_data = get_user_data(user_id)
        if not user_data:
            logger.info(f"Creating new user data for user {user_id}")
            user_data = {
                "user_id": user_id,
                "username": user.username or "Anonymous",
                "registration_date": datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
                "games_played": 0,
                "favorite_game": None,
                "balance": 0,
                "even_odd_games": 0,
                "higher_lower_games": 0,
                "last_activity": datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
            }
            update_user_data(user_id, user_data)
            save_user_data()

        # Create welcome keyboard
        keyboard = [
            [
                InlineKeyboardButton("–ü—Ä–æ—Ñ–∏–ª—å", callback_data="profile"),
                InlineKeyboardButton("–ò–ì–†–ê–¢–¨", callback_data="play")
            ]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        # Send welcome message
        await update.message.reply_text(
            "–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º –≤–∞—Å –≤ –Ω–∞—à–µ–º –∑–∞—Ö–≤–∞—Ç—ã–≤–∞—é—â–µ–º –∫–∞–∑–∏–Ω–æ! üé∞üí• –ü–æ–≥—Ä—É–∑–∏—Ç–µ—Å—å –≤ –º–∏—Ä –∞–∑–∞—Ä—Ç–∞ –∏ —É–¥–∞—á–∏ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å!",
            reply_markup=reply_markup
        )
        logger.info(f"Successfully sent welcome message to user {user_id}")

    except AttributeError as e:
        logger.error(f"AttributeError in start handler: {e}")
        if update.effective_chat:
            await context.bot.send_message(
                chat_id=update.effective_chat.id,
                text="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )
    except Exception as e:
        logger.error(f"Error in start handler: {e}")
        if update.effective_chat:
            await context.bot.send_message(
                chat_id=update.effective_chat.id,
                text="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )

async def create_payment_url(user_id, bet_amount=4.0):
    """
    Creates a payment URL for CryptoBot.
    Always uses the fixed invoice IV15707697 which shows coin selection first
    and then allows user to enter a custom amount.
    """
    logger.info(f"Creating payment URL for user {user_id}")

    # Always use the fixed invoice that's configured for custom amounts
    fixed_invoice_url = "https://t.me/CryptoBot?start=IV15707697"
    logger.info(f"Created payment URL: {fixed_invoice_url}")
    return fixed_invoice_url

async def send_channel_bet_message(context, user, game_type=None, bet_choice=None, bet_amount=4.0):
    """
    Sends a bet message to the game channel
    """
    logger.info(f"üéÆ Sending bet message for user {user.id}")

    try:
        # Create payment URL with arbitrary amount selection
        payment_url = await create_payment_url(user.id, 0.1)

        # Send bet message to channel
        message = await context.bot.send_message(
            chat_id=RESULTS_CHANNEL_ID,
            text=(
                f"üéÆ *–ù–û–í–ê–Ø –°–¢–ê–í–ö–ê* üî•\n\n"
                f"üë§ –ò–≥—Ä–æ–∫: {user.first_name}\n\n"
                f"üìù *–í –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∫ –ø–ª–∞—Ç–µ–∂—É —É–∫–∞–∂–∏—Ç–µ:*\n\n"
                f"*–†–µ–∂–∏–º –∏ –∏—Å—Ö–æ–¥:*\n"
                f"‚Ä¢ üé≥ –ë–æ—É–ª–∏–Ω–≥: `–±–æ–ª - –ø–æ–±–µ–¥–∞` –∏–ª–∏ `–±–æ–ª - –ø–æ—Ä–∞–∂–µ–Ω–∏–µ`\n"
                f"‚Ä¢ üé≤ –ß–µ—Ç/–ù–µ—á–µ—Ç: `—á–µ—Ç` –∏–ª–∏ `–Ω–µ—á–µ—Ç`\n"
                f"‚Ä¢ üìä –ë–æ–ª—å—à–µ/–ú–µ–Ω—å—à–µ: `–±–æ–ª—å—à–µ` –∏–ª–∏ `–º–µ–Ω—å—à–µ`\n\n"
                f"üëá *–í–≤–µ–¥–∏—Ç–µ —É–¥–æ–±–Ω—É—é –¥–ª—è –≤–∞—Å —Å—É–º–º—É –æ—Ç 0.1 –¥–æ 10 TON* –ø—Ä–∏ –æ–ø–ª–∞—Ç–µ —á–µ—Ä–µ–∑ CryptoBot:"
            ),
            parse_mode="Markdown",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üí∞ –°–¥–µ–ª–∞—Ç—å —Å—Ç–∞–≤–∫—É", url=payment_url)],
                [InlineKeyboardButton("üìã –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è", callback_data="instruction")]
            ])
        )

        return message
    except Exception as e:
        logger.error(f"Error sending bet message: {e}")
        raise

def get_main_keyboard():
    """Main menu keyboard"""
    keyboard = [
        [
            InlineKeyboardButton("–ü—Ä–æ—Ñ–∏–ª—å", callback_data="profile"),
            InlineKeyboardButton("–ò–ì–†–ê–¢–¨", callback_data="play")
        ]
    ]
    return InlineKeyboardMarkup(keyboard)

def get_game_keyboard():
    """Game selection keyboard"""
    keyboard = [
        [InlineKeyboardButton("üé≤ –ß–µ—Ç/–Ω–µ—á–µ—Ç", callback_data="game_even_odd")],
        [InlineKeyboardButton("üìä –ë–æ–ª—å—à–µ/–º–µ–Ω—å—à–µ", callback_data="game_higher_lower")],
        [InlineKeyboardButton("üé≥ –ë–æ—É–ª–∏–Ω–≥", callback_data="game_bowling")],
        [InlineKeyboardButton("üß™ –¢–µ—Å—Ç API", callback_data="test_api")],
        [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")],
    ]
    return InlineKeyboardMarkup(keyboard)

async def profile_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Handle profile button click."""
    query = update.callback_query
    await query.answer()

    user_id = query.from_user.id
    games_played = get_games_played(user_id)
    registration_date = get_registration_date(user_id)
    favorite_game = get_favorite_game(user_id)

    games_text = f"üéÆ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—ã–≥—Ä–∞–Ω–Ω—ã—Ö –∏–≥—Ä: {games_played}" if games_played > 0 else "üéÆ –í—ã –µ—â–µ –Ω–µ —Å—ã–≥—Ä–∞–ª–∏ –Ω–∏ –æ–¥–Ω–æ–π –∏–≥—Ä—ã!"
    favorite_text = f"‚ù§Ô∏è –õ—é–±–∏–º—ã–π —Ä–µ–∂–∏–º: {favorite_game}" if favorite_game else "‚ù§Ô∏è –£ –≤–∞—Å –µ—â–µ –Ω–µ—Ç –ª—é–±–∏–º–æ–≥–æ —Ä–µ–∂–∏–º–∞ –∏–≥—Ä—ã."

    profile_text = (
        "üë§ –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:\n\n"
        f"{games_text}\n\n"
        f"üìÖ –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {registration_date}\n\n"
        f"{favorite_text}"
    )

    await query.edit_message_text(
        text=profile_text,
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")]
        ])
    )

async def play_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Handle play button click."""
    try:
        query = update.callback_query
        await query.answer()
    except Exception as e:
        logger.warning(f"Could not answer callback query: {e}")
        pass

    # Use the game channel ID
    channel_id = "-1002305257035"  # –ò–≥—Ä–æ–≤–æ–π –∫–∞–Ω–∞–ª
    fixed_channel_url = "https://t.me/test5363627"  # TODO: –æ–±–Ω–æ–≤–∏—Ç—å –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π URL –∫–∞–Ω–∞–ª–∞
    channel_url = fixed_channel_url

    user = query.from_user
    payment_url = "https://t.me/CryptoBot?start=IV15707697"  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∏–Ω–≤–æ–π—Å

    try:
        # Verify bot permissions in the channel
        try:
            bot_member = await context.bot.get_chat_member(chat_id=channel_id, user_id=context.bot.id)
            logger.info(f"Bot permissions in channel {channel_id}: {bot_member.status}")

            if bot_member.status not in ['administrator', 'member']:
                await query.edit_message_text(
                    text="‚ö†Ô∏è –ë–æ—Ç –Ω–µ –∏–º–µ–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∏–≥—Ä–æ–≤–æ–º—É –∫–∞–Ω–∞–ª—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –≤ –∫–∞–Ω–∞–ª –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
                    reply_markup=InlineKeyboardMarkup([
                        [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")]
                    ])
                )
                return
        except Exception as e:
            logger.error(f"Error checking bot permissions: {e}")
            await query.edit_message_text(
                text="‚ö†Ô∏è –ë–æ—Ç –Ω–µ –∏–º–µ–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∏–≥—Ä–æ–≤–æ–º—É –∫–∞–Ω–∞–ª—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –≤ –∫–∞–Ω–∞–ª –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")]
                ])
            )
            return

        # Send bet message to the channel
        message = await context.bot.send_message(
            chat_id=channel_id,
            text=(
                f"üéÆ *–ù–û–í–ê–Ø –°–¢–ê–í–ö–ê* üî•\n\n"
                f"üë§ –ò–≥—Ä–æ–∫: {user.first_name}\n\n"
                f"üìù *–í –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∫ –ø–ª–∞—Ç–µ–∂—É —É–∫–∞–∂–∏—Ç–µ:*\n\n"
                f"*–†–µ–∂–∏–º –∏ –∏—Å—Ö–æ–¥:*\n"
                f"‚Ä¢ üé≥ –ë–æ—É–ª–∏–Ω–≥: `–±–æ–ª - –ø–æ–±–µ–¥–∞` –∏–ª–∏ `–±–æ–ª - –ø–æ—Ä–∞–∂–µ–Ω–∏–µ`\n"
                f"‚Ä¢ üé≤ –ß–µ—Ç/–ù–µ—á–µ—Ç: `—á–µ—Ç` –∏–ª–∏ `–Ω–µ—á–µ—Ç`\n"
                f"‚Ä¢ üìä –ë–æ–ª—å—à–µ/–ú–µ–Ω—å—à–µ: `–±–æ–ª—å—à–µ` –∏–ª–∏ `–º–µ–Ω—å—à–µ`\n\n"
                f"üëá *–í–≤–µ–¥–∏—Ç–µ —É–¥–æ–±–Ω—É—é –¥–ª—è –≤–∞—Å —Å—É–º–º—É –æ—Ç 0.1 –¥–æ 10 TON* –ø—Ä–∏ –æ–ø–ª–∞—Ç–µ —á–µ—Ä–µ–∑ CryptoBot:"
            ),
            parse_mode="Markdown",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üí∞ –°–¥–µ–ª–∞—Ç—å —Å—Ç–∞–≤–∫—É", url=payment_url)],
                [InlineKeyboardButton("üìã –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è", callback_data="instruction")]
            ])
        )
        logger.info(f"Successfully sent bet message to channel {channel_id}")

        # Save bet information in context
        if not context.user_data.get("bets"):
            context.user_data["bets"] = {}

        bet_id = f"{user.id}_{int(datetime.datetime.now().timestamp())}"
        context.user_data["bets"][bet_id] = {
            "game_type": "user_choice",  # User will choose when paying
            "bet_choice": "user_choice",  # User will choose when paying
            "message_id": message.message_id if message else None,
            "timestamp": datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        }

        # Send success message to user
        await query.edit_message_text(
            text="üíé –•–æ—á–µ—à—å –∏—Å–ø—ã—Ç–∞—Ç—å —É–¥–∞—á—É?\n\nüí∞ –°–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å—Ç–∞–≤–∫–æ–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –∫–∞–Ω–∞–ª! –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ –∫–∞–Ω–∞–ª –∏ –æ–ø–ª–∞—Ç—ã —Å—Ç–∞–≤–∫–∏.",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üé≤ –ü–µ—Ä–µ–π—Ç–∏ –≤ –∫–∞–Ω–∞–ª", url=channel_url)],
                [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")]
            ])
        )
    except Exception as e:
        logger.error(f"Error in play handler when sending to channel {channel_id}: {e}")
        try:
            await query.edit_message_text(
                text="‚ö†Ô∏è –ë–æ—Ç –Ω–µ –∏–º–µ–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∏–≥—Ä–æ–≤–æ–º—É –∫–∞–Ω–∞–ª—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –≤ –∫–∞–Ω–∞–ª –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")]
                ])
            )
        except Exception as edit_error:
            logger.error(f"Failed to send error message to user: {edit_error}")

async def game_selection_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Handle game selection."""
    query = update.callback_query
    await query.answer()

    logger.info(f"–í—ã–±—Ä–∞–Ω —Ä–µ–∂–∏–º –∏–≥—Ä—ã: {query.data}")

    parts = query.data.split("_", 1)

    if len(parts) != 2:
        logger.error(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç callback_data: {query.data}")
        return

    prefix, game_type = parts

    user = query.from_user

    await send_channel_bet_message(context, user, None, None)

    await query.edit_message_text(
        text="‚úÖ –í–∞—à–∞ —Å—Ç–∞–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞! –ü–µ—Ä–µ—Ö–æ–¥–∏—Ç–µ –≤ –∫–∞–Ω–∞–ª, —á—Ç–æ–±—ã —Å–¥–µ–ª–∞—Ç—å —Å—Ç–∞–≤–∫—É.",
        reply_markup=get_main_keyboard()
    )

async def cancel_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Handle cancel button click or unknown text messages."""
    if update.callback_query:
        query = update.callback_query
        await query.answer()

        if query.data == "back_to_main":
            await query.edit_message_text(
                text="–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º –≤–∞—Å –≤ –Ω–∞—à–µ–º –∑–∞—Ö–≤–∞—Ç—ã–≤–∞—é—â–µ–º –∫–∞–∑–∏–Ω–æ! üé∞üí• –ü–æ–≥—Ä—É–∑–∏—Ç–µ—Å—å –≤ –º–∏—Ä –∞–∑–∞—Ä—Ç–∞ –∏ —É–¥–∞—á–∏ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å!",
                reply_markup=get_main_keyboard()
            )
    elif update.message:
        await update.message.reply_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –±–æ—Ç–æ–º.",
            reply_markup=get_main_keyboard()
        )

async def instruction_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è"""
    query = update.callback_query
    await query.answer()

    user_id = query.from_user.id

    instruction_text = "–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–°–¥–µ–ª–∞—Ç—å —Å—Ç–∞–≤–∫—É' –Ω–∏–∂–µ –∏ –≤—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω—É—é –≤–∞–º —Å—É–º–º—É (–æ—Ç 0.1 –¥–æ 10 TON)"

    logger.warning(f"üî¥üî¥üî¥ –°–û–ó–î–ê–ù–ò–ï –°–°–´–õ–ö–ò –í –ò–ù–°–¢–†–£–ö–¶–ò–ò –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    payment_url = await create_payment_url(user_id, 0.1)

    logger.warning(f"===DEBUG=== –°–æ–∑–¥–∞–Ω–Ω—ã–π WebApp payment_url: {payment_url}")

    await query.edit_message_text(
        text=instruction_text,
        parse_mode="Markdown",
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("üí∞ –°–¥–µ–ª–∞—Ç—å —Å—Ç–∞–≤–∫—É", url=payment_url)],
            [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")]
        ])
    )

async def test_api_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è API CryptoBot"""
    is_callback = False
    if update.callback_query:
        query = update.callback_query
        await query.answer()
        is_callback = True
        message = await query.edit_message_text("üîÑ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ CryptoBot API...")
    else:
        message = await update.message.reply_text("üîÑ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ CryptoBot API...")

    api_result = await test_api_connection()

    logger.info(f"API test result: {api_result}")

    if api_result.get("success"):
        await message.edit_text(
            f"‚úÖ –£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ CryptoBot API!\n\n"
            f"App ID: {api_result.get('app_id')}\n"
            f"Name: {api_result.get('name')}\n\n"
            f"–°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂..."
        )

        user_id = update.effective_user.id
        amount = 0.1

        logger.warning(f"üî¥üî¥üî¥ –°–û–ó–î–ê–ù–ò–ï –¢–ï–°–¢–û–í–û–ì–û –ò–ù–í–û–ô–°–ê —Å –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–π —Å—É–º–º–æ–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        payment_url = await create_payment_url(user_id, 0.1)

        if isinstance(payment_url, str) and payment_url.startswith("https://"):
            test_success_text = (
                f"‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂–Ω—ã–π URL —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ!\n\n"
                f"–°—É–º–º–∞: {amount} TON\n\n"
                f"–í—ã –º–æ–∂–µ—Ç–µ –æ–ø–ª–∞—Ç–∏—Ç—å –µ–≥–æ –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞:"
            )

            test_instructions = "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–û–ø–ª–∞—Ç–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π —Å—á–µ—Ç' –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏"

            if is_callback:
                await message.edit_text(
                    text=test_success_text,
                    reply_markup=InlineKeyboardMarkup([
                        [InlineKeyboardButton("–û–ø–ª–∞—Ç–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π —Å—á–µ—Ç", url=payment_url)],
                        [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")]
                    ])
                )

                await context.bot.send_message(
                    chat_id=update.effective_user.id,
                    text=test_instructions,
                    parse_mode="Markdown"
                )
            else:
                await update.message.reply_text(
                    text=test_success_text,
                    reply_markup=InlineKeyboardMarkup([
                        [InlineKeyboardButton("–û–ø–ª–∞—Ç–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π —Å—á–µ—Ç", url=payment_url)]
                    ])
                )

                await update.message.reply_text(
                    text=test_instructions,
                    parse_mode="Markdown"
                )
        else:
            error_message = payment_url if isinstance(payment_url, str) else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞"
            error_text = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–Ω–æ–≥–æ URL:\n\n{error_message}"

            if is_callback:
                await message.edit_text(
                    text=error_text,
                    reply_markup=InlineKeyboardMarkup([
                        [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")]
                    ])
                )
            else:
                await message.edit_text(error_text)

            logger.error(f"Error creating test payment URL: {error_message}")
    else:
        error_text = f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ CryptoBot API:\n\n{api_result.get('message')}"

        if is_callback:
            await message.edit_text(
                text=error_text,
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")]
                ])
            )
        else:
            await message.edit_text(error_text)

async def chat_member_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Handle bot being added to or removed from a chat"""
    chat_member = update.my_chat_member
    chat_id = chat_member.chat.id

    if chat_member.new_chat_member.status in ["administrator", "member"]:
        logger.info(f"–ë–æ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ —á–∞—Ç {chat_id}")

        try:
            # Create payment URL for welcome message
            payment_url = await create_payment_url(context._application.bot.id)

            # Send welcome message with buttons
            welcome_message = (
                "üé∞ *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ò–≥—Ä–æ–≤–æ–π –ë–æ—Ç!*\n\n"
                "üíé –°–¥–µ–ª–∞–π—Ç–µ —Å—Ç–∞–≤–∫—É –∏ –∏—Å–ø—ã—Ç–∞–π—Ç–µ —Å–≤–æ—é —É–¥–∞—á—É!\n\n"
                "üé≤ *–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–µ–∂–∏–º—ã –∏–≥—Ä—ã:*\n"
                "‚Ä¢ –ß–µ—Ç/–ù–µ—á–µ—Ç\n"
                "‚Ä¢ –ë–æ–ª—å—à–µ/–ú–µ–Ω—å—à–µ\n"
                "‚Ä¢ –ë–æ—É–ª–∏–Ω–≥\n\n"
                "üí° –í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º –ø—Ä–∏ –æ–ø–ª–∞—Ç–µ —Å—Ç–∞–≤–∫–∏, —É–∫–∞–∑–∞–≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:\n"
                "`–ß–µ—Ç –∏ –ù–µ—á–µ—Ç [–ß–µ—Ç/–Ω–µ—á–µ—Ç]`\n"
                "`–ë–æ–ª—å—à–µ –∏ –º–µ–Ω—å—à–µ [–ë–æ–ª—å—à–µ/–ú–µ–Ω—å—à–µ]`\n"
                "`–ë–æ—É–ª [–ü–æ–±–µ–¥–∞/–ü–æ—Ä–∞–∂–µ–Ω–∏–µ]`"
            )

            await context.bot.send_message(
                chat_id=chat_id,
                text=welcome_message,
                parse_mode="Markdown",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("üí∞ –°–¥–µ–ª–∞—Ç—å —Å—Ç–∞–≤–∫—É", url=payment_url)],
                    [InlineKeyboardButton("üìã –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è", callback_data="instruction")]
                ])
            )
            logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç {chat_id}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

    elif chat_member.new_chat_member.status in ["left", "kicked"]:
        logger.info(f"–ë–æ—Ç —É–¥–∞–ª–µ–Ω –∏–∑ —á–∞—Ç–∞ {chat_id}")

async def process_game_result(update: Update, context: ContextTypes.DEFAULT_TYPE, game_type: str, bet_choice: str, amount: float):
    """
    Process game result and send formatted message to channel
    """
    username = update.effective_user.username or f"user{update.effective_user.id}"

    # Format game type and bet choice for display
    game_display = {
        "bowling": "üé≥ –ë–æ—É–ª–∏–Ω–≥",
        "even_odd": "üé≤ –ß–µ—Ç/–ù–µ—á–µ—Ç",
        "higher_lower": "üìä –ë–æ–ª—å—à–µ/–ú–µ–Ω—å—à–µ"
    }.get(game_type, game_type)

    bet_display = {
        "win": "–ü–æ–±–µ–¥–∞",
        "lose": "–ü–æ—Ä–∞–∂–µ–Ω–∏–µ",
        "even": "–ß–µ—Ç",
        "odd": "–ù–µ—á–µ—Ç",
        "higher": "–ë–æ–ª—å—à–µ",
        "lower": "–ú–µ–Ω—å—à–µ"
    }.get(bet_choice, bet_choice)

    # Generate game result
    if game_type == "bowling":
        dice_value = random.randint(1, 6)
        user_won = (bet_choice == "win" and dice_value >= 4) or (bet_choice == "lose" and dice_value < 4)
        result_text = f"–í—ã–ø–∞–ª–æ: {dice_value} –æ—á–∫–æ–≤"
    elif game_type == "even_odd":
        dice_value = random.randint(1, 6)
        is_even = dice_value % 2 == 0
        user_won = (bet_choice == "even" and is_even) or (bet_choice == "odd" and not is_even)
        result_text = "–ß–µ—Ç" if is_even else "–ù–µ—á–µ—Ç"
    else:  # higher_lower
        dice_value = random.randint(1, 6)
        is_higher = dice_value > 3
        user_won = (bet_choice == "higher" and is_higher) or (bet_choice == "lower" and not is_higher)
        result_text = "–ë–æ–ª—å—à–µ 3" if is_higher else "–ú–µ–Ω—å—à–µ 4"

    # Calculate winnings (1.5x for winning)
    winnings = amount * 1.5 if user_won else -amount

    # Format result message
    result_message = (
        f"üéÆ –ò–≥—Ä–∞: {game_display}\n"
        f"üë§ –ò–≥—Ä–æ–∫: @{username}\n"
        f"üí∞ –°—Ç–∞–≤–∫–∞: {amount} TON\n"
        f"üéØ –í—ã–±–æ—Ä: {bet_display}\n"
        f"üé≤ {result_text}\n"
        f"üí´ –†–µ–∑—É–ª—å—Ç–∞—Ç: {'–í—ã–∏–≥—Ä—ã—à ' + str(winnings) + ' TON' if user_won else '–ü—Ä–æ–∏–≥—Ä—ã—à ' + str(amount) + ' TON'}"
    )

    # Send result to channel
    try:
        await context.bot.send_message(
            chat_id=RESULTS_CHANNEL_ID,
            text=result_message,
            parse_mode="Markdown"
        )
    except Exception as e:
        logger.error(f"Error sending game result to channel: {e}")
        raise

    return {
        "user_won": user_won,
        "winnings": winnings if user_won else -amount,
        "dice_value": dice_value,
        "result_text": result_text
    }
